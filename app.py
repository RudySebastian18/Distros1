import streamlit as st
import json
import streamlit.components.v1 as components
from pyvis.network import Network

# Funci√≥n para cargar los datos del archivo JSON
def cargar_datos_distros(path):
    with open(path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    return data

# T√≠tulo y descripci√≥n de la p√°gina
st.title("Cronolog√≠a y Desarrollo de las Distribuciones Linux")
st.markdown("---")
st.markdown("Este proyecto es una p√°gina web dedicada a la **cronolog√≠a y el desarrollo de las principales distribuciones de Linux**...")

# Cargar los datos
try:
    distros = cargar_datos_distros('distros.json')
except FileNotFoundError:
    st.error("No se encontr√≥ el archivo 'distros.json'. Aseg√∫rate de que est√° en el mismo directorio.")
    distros = []

# ‚è≥ Secci√≥n de Cronolog√≠a
st.header("‚è≥ Cronolog√≠a Interactiva")
st.markdown("Un viaje visual a trav√©s del tiempo...")

if distros:
    distros_ordenadas = sorted(distros, key=lambda x: x['fecha_lanzamiento'])
    for distro in distros_ordenadas:
        with st.expander(f"**{distro['nombre']}** - ({distro['fecha_lanzamiento']})"):
            st.write(f"**Descripci√≥n:** {distro['descripcion']}")
            st.write(f"**Paqueter√≠a:** {distro['paqueteria']}")
            st.write(f"**Filosof√≠a:** {distro['filosofia']}")
            if distro['basado_en']:
                st.write(f"**Basada en:** {distro['basado_en']}")
            if distro['ramas']:
                st.write(f"**Ramas derivadas:** {', '.join(distro['ramas'])}")

# üå≥ Secci√≥n de √Årboles Geneal√≥gicos
st.markdown("---")
st.header("üå≥ √Årboles Geneal√≥gicos")
st.markdown("Descubre c√≥mo las distribuciones est√°n relacionadas...")

# **Aqu√≠ est√° el c√≥digo corregido y funcional para el gr√°fico con Pyvis**
if distros:
    net = Network(height='750px', width='100%', bgcolor='#222222', font_color='white')

    # A√±adir nodos y aristas din√°micamente desde los datos JSON
    for distro in distros:
        net.add_node(distro['nombre'], title=distro['descripcion'], color="lightblue")
        if distro['basado_en']:
            # Aseg√∫rate de que la distro base tambi√©n est√© como un nodo
            net.add_node(distro['basado_en'], color="orange") 
            net.add_edge(distro['basado_en'], distro['nombre'])

    # Guardar y mostrar el gr√°fico
    net.save_graph("grafo.html")
    with open("grafo.html", "r", encoding="utf-8") as html_file:
        source_code = html_file.read()
        components.html(source_code, height=750)

# ‚öñÔ∏è Secci√≥n de Comparativas
st.markdown("---")
st.header("‚öñÔ∏è Comparativas Detalladas")
st.markdown("Secciones dedicadas a las diferencias entre los grupos de distros m√°s populares...")

distros_comparar = {
    "Debian": next((d for d in distros if d['nombre'] == 'Debian'), None),
    "Fedora": next((d for d in distros if d['nombre'] == 'Fedora'), None),
    "Arch Linux": next((d for d in distros if d['nombre'] == 'Arch Linux'), None)
}

if all(distros_comparar.values()):
    st.subheader("Comparaci√≥n de Gesti√≥n de Paquetes")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric(label="Debian", value=distros_comparar['Debian']['paqueteria'])
    with col2:
        st.metric(label="Fedora", value="RPM")
    with col3:
        st.metric(label="Arch Linux", value=distros_comparar['Arch Linux']['paqueteria'])

# üìö Secci√≥n de Introducci√≥n para Principiantes
st.markdown("---")
st.header("üìö Introducci√≥n para Principiantes")
st.markdown("Un √°rea con informaci√≥n b√°sica para aquellos que reci√©n comienzan...")
st.write("¬øQu√© es una distribuci√≥n de Linux? ¬øCu√°l es la mejor para empezar?")
st.info("Una distribuci√≥n es una colecci√≥n de software basada en el kernel de Linux...")
